-- VHDL Entity alien_game_lib.c5_t2_write_sequencer.symbol
--
-- Created:
--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)
--          at - 12:00:22 12/ 7/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c5_t2_write_sequencer IS
   PORT( 
      alien_defeated  : IN     std_logic;
      alien_health_in : IN     std_logic_vector (1 DOWNTO 0);
      clk             : IN     std_logic;
      rst_n           : IN     std_logic;
      write_ready     : IN     std_logic;
      enable          : OUT    std_logic;
      frame_done      : OUT    std_logic;
      gun_px_idx      : OUT    std_logic_vector (1 DOWNTO 0);
      module_select   : OUT    std_logic_vector (1 DOWNTO 0);
      write           : OUT    std_logic
   );

-- Declarations

END c5_t2_write_sequencer ;

--
-- VHDL Architecture alien_game_lib.c5_t2_write_sequencer.fsm
--
-- Created:
--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)
--          at - 12:00:22 12/ 7/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
 
ARCHITECTURE fsm OF c5_t2_write_sequencer IS

   -- Architecture Declarations
   SIGNAL delay : std_logic;  

   TYPE STATE_TYPE IS (
      Write00,
      Write01,
      Write10,
      Write11,
      Idle,
      WriteDone,
      WriteEnable,
      WriteStart,
      sWaitQuick,
      WriteBullet,
      WriteDefeatedEffect,
      sWaitDefeated,
      sWaitMedium,
      sWaitSlow
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(24 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(24 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_sWaitQuick : std_logic;
   SIGNAL csm_to_sWaitDefeated : std_logic;
   SIGNAL csm_to_sWaitMedium : std_logic;
   SIGNAL csm_to_sWaitSlow : std_logic;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst_n
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst_n = '0') THEN
         current_state <= Idle;
         csm_timer <= (OTHERS => '0');
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         csm_timer <= csm_next_timer;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      alien_defeated,
      alien_health_in,
      csm_timeout,
      current_state,
      write_ready
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_sWaitQuick <= '0';
      csm_to_sWaitDefeated <= '0';
      csm_to_sWaitMedium <= '0';
      csm_to_sWaitSlow <= '0';
      CASE current_state IS
         WHEN Write00 => 
            IF (write_ready = '1') THEN 
               next_state <= Write01;
            ELSE
               next_state <= Write00;
            END IF;
         WHEN Write01 => 
            IF (write_ready = '1') THEN 
               next_state <= Write10;
            ELSE
               next_state <= Write01;
            END IF;
         WHEN Write10 => 
            IF (write_ready = '1') THEN 
               next_state <= Write11;
            ELSE
               next_state <= Write10;
            END IF;
         WHEN Write11 => 
            IF (write_ready = '1') THEN 
               next_state <= WriteBullet;
            ELSE
               next_state <= Write11;
            END IF;
         WHEN Idle => 
            IF (write_ready = '1' AND alien_defeated = '1') THEN 
               next_state <= WriteDefeatedEffect;
            ELSIF (write_ready = '1') THEN 
               next_state <= WriteStart;
            ELSIF (write_ready = '0') THEN 
               next_state <= Idle;
            ELSE
               next_state <= Idle;
            END IF;
         WHEN WriteDone => 
            IF ((write_ready = '0' OR write_ready = '1') AND (alien_health_in = "01"  OR alien_health_in = "00")) THEN 
               next_state <= sWaitQuick;
               csm_to_sWaitQuick <= '1';
            ELSIF ((write_ready = '0' OR write_ready = '1') AND alien_health_in = "10") THEN 
               next_state <= sWaitMedium;
               csm_to_sWaitMedium <= '1';
            ELSIF ((write_ready = '0' OR write_ready = '1') AND alien_health_in = "11") THEN 
               next_state <= sWaitSlow;
               csm_to_sWaitSlow <= '1';
            ELSE
               next_state <= WriteDone;
            END IF;
         WHEN WriteEnable => 
            IF (write_ready = '1' OR write_ready = '0') THEN 
               next_state <= Idle;
            ELSE
               next_state <= WriteEnable;
            END IF;
         WHEN WriteStart => 
            IF (write_ready = '1') THEN 
               next_state <= Write00;
            ELSE
               next_state <= WriteStart;
            END IF;
         WHEN sWaitQuick => 
            IF (csm_timeout = '1') THEN 
               next_state <= WriteEnable;
            ELSE
               next_state <= sWaitQuick;
            END IF;
         WHEN WriteBullet => 
            IF (write_ready = '1') THEN 
               next_state <= WriteDone;
            ELSE
               next_state <= WriteBullet;
            END IF;
         WHEN WriteDefeatedEffect => 
            IF (write_ready = '1') THEN 
               next_state <= sWaitDefeated;
               csm_to_sWaitDefeated <= '1';
            ELSE
               next_state <= WriteDefeatedEffect;
            END IF;
         WHEN sWaitDefeated => 
            IF (csm_timeout = '1' AND (write_ready = '1')) THEN 
               next_state <= WriteDone;
            ELSE
               next_state <= sWaitDefeated;
            END IF;
         WHEN sWaitMedium => 
            IF (csm_timeout = '1') THEN 
               next_state <= WriteEnable;
            ELSE
               next_state <= sWaitMedium;
            END IF;
         WHEN sWaitSlow => 
            IF (csm_timeout = '1') THEN 
               next_state <= WriteEnable;
            ELSE
               next_state <= sWaitSlow;
            END IF;
         WHEN OTHERS =>
            next_state <= Idle;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      enable <= '0';
      frame_done <= '0';
      gun_px_idx <= "00";
      module_select <= "00";
      write <= '0';
      -- Default Assignment To Internals
      delay <= '1';

      -- Combined Actions
      CASE current_state IS
         WHEN Write00 => 
            gun_px_idx <= "00" ;
            module_select <= "01" ;
            write <= '1' ;
         WHEN Write01 => 
            gun_px_idx <= "01";
            module_select <= "01";
            write <= '1';
         WHEN Write10 => 
            gun_px_idx <= "10";
            module_select <= "01";
            write <= '1';
         WHEN Write11 => 
            gun_px_idx <= "11";
            module_select <= "01";
            write <= '1';
         WHEN Idle => 
            frame_done <= '0';
             write <= '0' ;
            gun_px_idx <= "00" ;
            module_select <= "00" ;
            enable <= '0';
            delay <= '0';
         WHEN WriteDone => 
            gun_px_idx <= "00";
            module_select <= "00";
            write <= '0';
            frame_done <= '1';
         WHEN WriteEnable => 
            frame_done <= '0';
            enable <= '1';
            write <= '0' ;
            module_select <= "00" ;
         WHEN WriteStart => 
            write <= '1' ;
            module_select <= "00";
         WHEN WriteBullet => 
            gun_px_idx <= "00" ;
            module_select <= "10";
            write <= '1' ;
         WHEN WriteDefeatedEffect => 
            gun_px_idx <= "00";
            module_select <= "11";
            write <= '1';
         WHEN sWaitDefeated => 
            gun_px_idx <= "00";
            module_select <= "11";
            write <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_sWaitQuick,
      csm_to_sWaitDefeated,
      csm_to_sWaitMedium,
      csm_to_sWaitSlow
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_sWaitQuick = '1') THEN
         csm_next_timer <= "0101111101011110000011111"; -- no cycles(12500000)-1=12499999
      ELSIF (csm_to_sWaitDefeated = '1') THEN
         csm_next_timer <= "0000000000000000000010110"; -- no cycles(23)-1=22
      ELSIF (csm_to_sWaitMedium = '1') THEN
         csm_next_timer <= "1011111010111100000111111"; -- no cycles(25000000)-1=24999999
      ELSIF (csm_to_sWaitSlow = '1') THEN
         csm_next_timer <= "1110010011100001101111111"; -- no cycles(30000000)-1=29999999
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

END fsm;
