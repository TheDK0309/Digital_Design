-- VHDL Entity alien_game_lib.c6_t1_victory_effect_fsm.symbol
--
-- Created:
--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)
--          at - 22:25:22 12/ 6/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c6_t1_victory_effect_fsm IS
   PORT( 
      alien_defeated : IN     std_logic;
      clk            : IN     std_logic;
      rst            : IN     std_logic;
      color          : OUT    std_logic_vector (23 DOWNTO 0);
      x_coord        : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord        : OUT    std_logic_vector (7 DOWNTO 0)
   );

-- Declarations

END c6_t1_victory_effect_fsm ;

--
-- VHDL Architecture alien_game_lib.c6_t1_victory_effect_fsm.fsm
--
-- Created:
--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)
--          at - 22:25:22 12/ 6/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c6_t1_victory_effect_fsm IS

   TYPE STATE_TYPE IS (
      px1,
      px2,
      px3,
      px4,
      px5,
      px6,
      px7,
      px8,
      px9,
      px10,
      px11,
      s11,
      Idle
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare Wait State internal signals
   SIGNAL csm_timer : std_logic_vector(3 DOWNTO 0);
   SIGNAL csm_next_timer : std_logic_vector(3 DOWNTO 0);
   SIGNAL csm_timeout : std_logic;
   SIGNAL csm_to_s11 : std_logic;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= Idle;
         csm_timer <= (OTHERS => '0');
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         csm_timer <= csm_next_timer;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      alien_defeated,
      csm_timeout,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default assignments to Wait State entry flags
      csm_to_s11 <= '0';
      CASE current_state IS
         WHEN px1 => 
            next_state <= px2;
         WHEN px2 => 
            next_state <= px3;
         WHEN px3 => 
            next_state <= px4;
         WHEN px4 => 
            next_state <= px5;
         WHEN px5 => 
            next_state <= px6;
         WHEN px6 => 
            next_state <= px7;
         WHEN px7 => 
            next_state <= px8;
         WHEN px8 => 
            next_state <= px9;
         WHEN px9 => 
            next_state <= px10;
         WHEN px10 => 
            next_state <= px11;
         WHEN px11 => 
            next_state <= s11;
            csm_to_s11 <= '1';
         WHEN s11 => 
            IF (csm_timeout = '1') THEN 
               next_state <= Idle;
            ELSE
               next_state <= s11;
            END IF;
         WHEN Idle => 
            IF (alien_defeated = '1') THEN 
               next_state <= px1;
            ELSE
               next_state <= Idle;
            END IF;
         WHEN OTHERS =>
            next_state <= Idle;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      x_coord <= x"00";
      y_coord <= x"00";

      -- Combined Actions
      CASE current_state IS
         WHEN px1 => 
            x_coord <= x"01";
            y_coord <= x"02";
            color <= x"66ffcc";
         WHEN px2 => 
            x_coord <= x"01";
            y_coord <= x"04";
            color <= x"66ffcc";
         WHEN px3 => 
            x_coord <= x"01";
            y_coord <= x"08";
            color <= x"66ffcc";
         WHEN px4 => 
            x_coord <= x"02";
            y_coord <= x"04";
            color <= x"66ffcc";
         WHEN px5 => 
            x_coord <= x"04";
            y_coord <= x"02";
            color <= x"66ffcc";
         WHEN px6 => 
            x_coord <= x"04";
            y_coord <= x"08";
            color <= x"66ffcc";
         WHEN px7 => 
            x_coord <= x"10";
            y_coord <= x"02";
            color <= x"66ffcc";
         WHEN px8 => 
            x_coord <= x"20";
            y_coord <= x"02";
            color <= x"66ffcc";
         WHEN px9 => 
            x_coord <= x"20";
            y_coord <= x"04";
            color <= x"66ffcc";
         WHEN px10 => 
            x_coord <= x"20";
            y_coord <= x"08";
            color <= x"66ffcc";
         WHEN px11 => 
            x_coord <= x"40";
            y_coord <= x"02";
            color <= x"66ffcc";
         WHEN s11 => 
            x_coord <= x"00";
            y_coord <= x"00";
            color <= x"000000";
         WHEN Idle => 
            x_coord <= x"00";
            y_coord <= x"00";
            color <= x"000000";
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
   -----------------------------------------------------------------
   csm_wait_combo_proc: PROCESS (
      csm_timer,
      csm_to_s11
   )
   -----------------------------------------------------------------
   VARIABLE csm_temp_timeout : std_logic;
   BEGIN
      IF (unsigned(csm_timer) = 0) THEN
         csm_temp_timeout := '1';
      ELSE
         csm_temp_timeout := '0';
      END IF;

      IF (csm_to_s11 = '1') THEN
         csm_next_timer <= "1100"; -- no cycles(13)-1=12
      ELSE
         IF (csm_temp_timeout = '1') THEN
            csm_next_timer <= (OTHERS=>'0');
         ELSE
            csm_next_timer <= unsigned(csm_timer) - '1';
         END IF;
      END IF;
      csm_timeout <= csm_temp_timeout;
   END PROCESS csm_wait_combo_proc;

END fsm;
