-- VHDL Entity alien_game_lib.c7_t1_top_level.symbol
--
-- Created:
--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)
--          at - 23:27:48 12/ 6/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c7_t1_top_level IS
   PORT( 
      btn     : IN     std_logic_vector (3 DOWNTO 0);
      clk     : IN     std_logic;
      rst_n   : IN     std_logic;
      channel : OUT    std_logic_vector (7 DOWNTO 0);
      lat     : OUT    std_logic;
      s_clk   : OUT    std_logic;
      s_rst   : OUT    std_logic;
      s_sda   : OUT    std_logic;
      sb      : OUT    std_logic
   );

-- Declarations

END c7_t1_top_level ;

--
-- VHDL Architecture alien_game_lib.c7_t1_top_level.struct
--
-- Created:
--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)
--          at - 23:27:48 12/ 6/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY alien_game_lib;

ARCHITECTURE struct OF c7_t1_top_level IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL Alien_color    : std_logic_vector(23 DOWNTO 0);
   SIGNAL Bullet_X_coord : std_logic_vector(7 DOWNTO 0);
   SIGNAL Bullet_Y_coord : std_logic_vector(7 DOWNTO 0);
   SIGNAL Color          : std_logic_vector(23 DOWNTO 0);
   SIGNAL Gun_color      : std_logic_vector(23 DOWNTO 0);
   SIGNAL X_coord        : std_logic_vector(7 DOWNTO 0);
   SIGNAL X_coordinate   : std_logic_vector(7 DOWNTO 0);
   SIGNAL Y_coord        : std_logic_vector(7 DOWNTO 0);
   SIGNAL Y_coordinate   : std_logic_vector(7 DOWNTO 0);
   SIGNAL alien_defeated : std_logic;
   SIGNAL data_out       : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout           : std_logic;
   SIGNAL dout1          : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout2          : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout3          : std_logic_vector(23 DOWNTO 0);
   SIGNAL dout4          : std_logic_vector(23 DOWNTO 0);
   SIGNAL dout5          : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout6          : std_logic_vector(7 DOWNTO 0);
   SIGNAL enable         : std_logic;
   SIGNAL frame_done     : std_logic;
   SIGNAL gun_px_idx     : std_logic_vector(1 DOWNTO 0);
   SIGNAL hit            : std_logic;
   SIGNAL module_select  : std_logic_vector(1 DOWNTO 0);
   SIGNAL w_rdy          : std_logic;
   SIGNAL write          : std_logic;


   -- Component Declarations
   COMPONENT c2_t4_right_shifter
   PORT (
      data_in  : IN     std_logic_vector (7 DOWNTO 0);
      data_out : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c2_t6_basic_alien
   PORT (
      clk            : IN     std_logic ;
      enable         : IN     std_logic ;
      hit            : IN     std_logic ;
      rst_n          : IN     std_logic ;
      Alien_color    : OUT    std_logic_vector (23 DOWNTO 0);
      X_coordinate   : OUT    std_logic_vector (7 DOWNTO 0);
      Y_coordinate   : OUT    std_logic_vector (7 DOWNTO 0);
      alien_defeated : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT c3_t1_gun_module
   PORT (
      btn        : IN     std_logic_vector (3 DOWNTO 0);
      clk        : IN     std_logic ;
      enable     : IN     std_logic ;
      gun_px_idx : IN     std_logic_vector (1 DOWNTO 0);
      rst_n      : IN     std_logic ;
      Gun_color  : OUT    std_logic_vector (23 DOWNTO 0);
      X_coord    : OUT    std_logic_vector (7 DOWNTO 0);
      Y_coord    : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c3_t2_bullet
   PORT (
      Gun_X_coord    : IN     std_logic_vector (7 DOWNTO 0);
      btn            : IN     std_logic_vector (3 DOWNTO 0);
      clk            : IN     std_logic ;
      enable         : IN     std_logic ;
      rst_n          : IN     std_logic ;
      Bullet_X_coord : OUT    std_logic_vector (7 DOWNTO 0);
      Bullet_Y_coord : OUT    std_logic_vector (7 DOWNTO 0);
      Color          : OUT    std_logic_vector (23 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c5_t1_hit_detector
   PORT (
      alien_x  : IN     std_logic_vector (7 DOWNTO 0);
      alien_y  : IN     std_logic_vector (7 DOWNTO 0);
      btn      : IN     std_logic ;
      bullet_x : IN     std_logic_vector (7 DOWNTO 0);
      bullet_y : IN     std_logic_vector (7 DOWNTO 0);
      clk      : IN     std_logic ;
      gun_x    : IN     std_logic_vector (7 DOWNTO 0);
      mode_in  : IN     std_logic ;
      rst_n    : IN     std_logic ;
      hit      : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT c5_t2_write_sequencer
   PORT (
      alien_defeated : IN     std_logic ;
      clk            : IN     std_logic ;
      rst_n          : IN     std_logic ;
      write_ready    : IN     std_logic ;
      enable         : OUT    std_logic ;
      frame_done     : OUT    std_logic ;
      gun_px_idx     : OUT    std_logic_vector (1 DOWNTO 0);
      module_select  : OUT    std_logic_vector (1 DOWNTO 0);
      write          : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT c6_t1_victory_effect_fsm
   PORT (
      alien_defeated : IN     std_logic ;
      clk            : IN     std_logic ;
      rst            : IN     std_logic ;
      color          : OUT    std_logic_vector (23 DOWNTO 0);
      x_coord        : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord        : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c7_t1_integration
   PORT (
      clk           : IN     std_logic ;
      frame_written : IN     std_logic ;
      pixd_in       : IN     std_logic_vector (23 DOWNTO 0);
      rst_n         : IN     std_logic ;
      write         : IN     std_logic ;
      xw            : IN     std_logic_vector (7 DOWNTO 0);
      yw            : IN     std_logic_vector (7 DOWNTO 0);
      channel       : OUT    std_logic_vector (7 DOWNTO 0);
      lat           : OUT    std_logic ;
      s_clk         : OUT    std_logic ;
      s_rst         : OUT    std_logic ;
      s_sda         : OUT    std_logic ;
      sb            : OUT    std_logic ;
      w_rdy         : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : c2_t4_right_shifter USE ENTITY alien_game_lib.c2_t4_right_shifter;
   FOR ALL : c2_t6_basic_alien USE ENTITY alien_game_lib.c2_t6_basic_alien;
   FOR ALL : c3_t1_gun_module USE ENTITY alien_game_lib.c3_t1_gun_module;
   FOR ALL : c3_t2_bullet USE ENTITY alien_game_lib.c3_t2_bullet;
   FOR ALL : c5_t1_hit_detector USE ENTITY alien_game_lib.c5_t1_hit_detector;
   FOR ALL : c5_t2_write_sequencer USE ENTITY alien_game_lib.c5_t2_write_sequencer;
   FOR ALL : c6_t1_victory_effect_fsm USE ENTITY alien_game_lib.c6_t1_victory_effect_fsm;
   FOR ALL : c7_t1_integration USE ENTITY alien_game_lib.c7_t1_integration;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'const_0' of 'constval'
   dout <= '0';

   -- ModuleWare code(v1.12) for instance 'U_7' of 'mux'
   u_7combo_proc: PROCESS(Alien_color, Gun_color, Color, dout4, 
                          module_select)
   BEGIN
      CASE module_select IS
      WHEN "00" => dout3 <= Alien_color;
      WHEN "01" => dout3 <= Gun_color;
      WHEN "10" => dout3 <= Color;
      WHEN "11" => dout3 <= dout4;
      WHEN OTHERS => dout3 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_7combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_8' of 'mux'
   u_8combo_proc: PROCESS(X_coordinate, X_coord, Bullet_X_coord, dout6, 
                          module_select)
   BEGIN
      CASE module_select IS
      WHEN "00" => dout1 <= X_coordinate;
      WHEN "01" => dout1 <= X_coord;
      WHEN "10" => dout1 <= Bullet_X_coord;
      WHEN "11" => dout1 <= dout6;
      WHEN OTHERS => dout1 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_8combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_9' of 'mux'
   u_9combo_proc: PROCESS(Y_coordinate, Y_coord, Bullet_Y_coord, dout5, 
                          module_select)
   BEGIN
      CASE module_select IS
      WHEN "00" => dout2 <= Y_coordinate;
      WHEN "01" => dout2 <= Y_coord;
      WHEN "10" => dout2 <= Bullet_Y_coord;
      WHEN "11" => dout2 <= dout5;
      WHEN OTHERS => dout2 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_9combo_proc;

   -- Instance port mappings.
   U_13 : c2_t4_right_shifter
      PORT MAP (
         data_in  => X_coord,
         data_out => data_out
      );
   U_1 : c2_t6_basic_alien
      PORT MAP (
         clk            => clk,
         enable         => enable,
         hit            => hit,
         rst_n          => rst_n,
         Alien_color    => Alien_color,
         X_coordinate   => X_coordinate,
         Y_coordinate   => Y_coordinate,
         alien_defeated => alien_defeated
      );
   U_2 : c3_t1_gun_module
      PORT MAP (
         btn        => btn,
         clk        => clk,
         enable     => enable,
         gun_px_idx => gun_px_idx,
         rst_n      => rst_n,
         Gun_color  => Gun_color,
         X_coord    => X_coord,
         Y_coord    => Y_coord
      );
   U_5 : c3_t2_bullet
      PORT MAP (
         Gun_X_coord    => data_out,
         btn            => btn,
         clk            => clk,
         enable         => enable,
         rst_n          => rst_n,
         Bullet_X_coord => Bullet_X_coord,
         Bullet_Y_coord => Bullet_Y_coord,
         Color          => Color
      );
   U_4 : c5_t1_hit_detector
      PORT MAP (
         alien_x  => X_coordinate,
         alien_y  => Y_coordinate,
         btn      => btn(0),
         bullet_x => Bullet_X_coord,
         bullet_y => Bullet_Y_coord,
         clk      => clk,
         gun_x    => X_coord,
         mode_in  => dout,
         rst_n    => rst_n,
         hit      => hit
      );
   U_3 : c5_t2_write_sequencer
      PORT MAP (
         alien_defeated => alien_defeated,
         clk            => clk,
         rst_n          => rst_n,
         write_ready    => w_rdy,
         enable         => enable,
         frame_done     => frame_done,
         gun_px_idx     => gun_px_idx,
         module_select  => module_select,
         write          => write
      );
   U_10 : c6_t1_victory_effect_fsm
      PORT MAP (
         alien_defeated => alien_defeated,
         clk            => clk,
         rst            => rst_n,
         color          => dout4,
         x_coord        => dout6,
         y_coord        => dout5
      );
   U_0 : c7_t1_integration
      PORT MAP (
         clk           => clk,
         frame_written => frame_done,
         pixd_in       => dout3,
         rst_n         => rst_n,
         write         => write,
         xw            => dout2,
         yw            => dout1,
         channel       => channel,
         lat           => lat,
         s_clk         => s_clk,
         s_rst         => s_rst,
         s_sda         => s_sda,
         sb            => sb,
         w_rdy         => w_rdy
      );

END struct;
