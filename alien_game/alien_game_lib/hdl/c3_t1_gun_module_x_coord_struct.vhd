-- VHDL Entity alien_game_lib.c3_t1_gun_module_x_coord.symbol
--
-- Created:
--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)
--          at - 18:46:38 10/10/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c3_t1_gun_module_x_coord IS
   PORT( 
      clk        : IN     std_logic;
      gun_px_idx : IN     std_logic_vector (1 DOWNTO 0);
      rst_n      : IN     std_logic;
      sel_val    : IN     std_logic_vector (1 DOWNTO 0);
      X_coord    : OUT    std_logic_vector (7 DOWNTO 0)
   );

-- Declarations

END c3_t1_gun_module_x_coord ;

--
-- VHDL Architecture alien_game_lib.c3_t1_gun_module_x_coord.struct
--
-- Created:
--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)
--          at - 22:02:49 10/10/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY alien_game_lib;

ARCHITECTURE struct OF c3_t1_gun_module_x_coord IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL dout             : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout4            : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout5            : std_logic_vector(7 DOWNTO 0);
   SIGNAL dout8            : std_logic_vector(7 DOWNTO 0);
   SIGNAL left_shifted_00  : std_logic_vector(7 DOWNTO 0);
   SIGNAL left_shifted_01  : std_logic_vector(7 DOWNTO 0);
   SIGNAL left_shifted_10  : std_logic_vector(7 DOWNTO 0);
   SIGNAL left_shifted_11  : std_logic_vector(7 DOWNTO 0);
   SIGNAL q1               : std_logic_vector(7 DOWNTO 0);
   SIGNAL q2               : std_logic_vector(7 DOWNTO 0);
   SIGNAL q3               : std_logic_vector(7 DOWNTO 0);
   SIGNAL q4               : std_logic_vector(7 DOWNTO 0);
   SIGNAL right_shifted_00 : std_logic_vector(7 DOWNTO 0);
   SIGNAL right_shifted_01 : std_logic_vector(7 DOWNTO 0);
   SIGNAL right_shifted_10 : std_logic_vector(7 DOWNTO 0);
   SIGNAL right_shifted_11 : std_logic_vector(7 DOWNTO 0);


   -- ModuleWare signal declarations(v1.12) for instance 'U_1' of 'adff'
   SIGNAL mw_U_1reg_cval : std_logic_vector(7 DOWNTO 0);

   -- ModuleWare signal declarations(v1.12) for instance 'U_10' of 'adff'
   SIGNAL mw_U_10reg_cval : std_logic_vector(7 DOWNTO 0);

   -- ModuleWare signal declarations(v1.12) for instance 'U_15' of 'adff'
   SIGNAL mw_U_15reg_cval : std_logic_vector(7 DOWNTO 0);

   -- ModuleWare signal declarations(v1.12) for instance 'U_21' of 'adff'
   SIGNAL mw_U_21reg_cval : std_logic_vector(7 DOWNTO 0);

   -- Component Declarations
   COMPONENT c2_t3_left_shifter
   PORT (
      data_in  : IN     std_logic_vector (7 DOWNTO 0);
      data_out : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c2_t4_right_shifter
   PORT (
      data_in  : IN     std_logic_vector (7 DOWNTO 0);
      data_out : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : c2_t3_left_shifter USE ENTITY alien_game_lib.c2_t3_left_shifter;
   FOR ALL : c2_t4_right_shifter USE ENTITY alien_game_lib.c2_t4_right_shifter;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_1' of 'adff'
   q1 <= mw_U_1reg_cval;
   u_1seq_proc: PROCESS (clk, rst_n)
   BEGIN
      IF (rst_n = '0') THEN
         mw_U_1reg_cval <= x"10";
      ELSIF (clk'EVENT AND clk='1') THEN
         mw_U_1reg_cval <= dout;
      END IF;
   END PROCESS u_1seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_10' of 'adff'
   q2 <= mw_U_10reg_cval;
   u_10seq_proc: PROCESS (clk, rst_n)
   BEGIN
      IF (rst_n = '0') THEN
         mw_U_10reg_cval <= x"08";
      ELSIF (clk'EVENT AND clk='1') THEN
         mw_U_10reg_cval <= dout4;
      END IF;
   END PROCESS u_10seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_15' of 'adff'
   q3 <= mw_U_15reg_cval;
   u_15seq_proc: PROCESS (clk, rst_n)
   BEGIN
      IF (rst_n = '0') THEN
         mw_U_15reg_cval <= x"04";
      ELSIF (clk'EVENT AND clk='1') THEN
         mw_U_15reg_cval <= dout5;
      END IF;
   END PROCESS u_15seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_21' of 'adff'
   q4 <= mw_U_21reg_cval;
   u_21seq_proc: PROCESS (clk, rst_n)
   BEGIN
      IF (rst_n = '0') THEN
         mw_U_21reg_cval <= x"08";
      ELSIF (clk'EVENT AND clk='1') THEN
         mw_U_21reg_cval <= dout8;
      END IF;
   END PROCESS u_21seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_2' of 'mux'
   u_2combo_proc: PROCESS(q1, q2, q3, q4, gun_px_idx)
   BEGIN
      CASE gun_px_idx IS
      WHEN "00" => X_coord <= q1;
      WHEN "01" => X_coord <= q2;
      WHEN "10" => X_coord <= q3;
      WHEN "11" => X_coord <= q4;
      WHEN OTHERS => X_coord <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_2combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_6' of 'mux'
   u_6combo_proc: PROCESS(q2, left_shifted_01, right_shifted_01, 
                          sel_val)
   BEGIN
      CASE sel_val IS
      WHEN "00" => dout4 <= q2;
      WHEN "01" => dout4 <= left_shifted_01;
      WHEN "10" => dout4 <= right_shifted_01;
      WHEN OTHERS => dout4 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_6combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_7' of 'mux'
   u_7combo_proc: PROCESS(q3, left_shifted_10, right_shifted_10, 
                          sel_val)
   BEGIN
      CASE sel_val IS
      WHEN "00" => dout5 <= q3;
      WHEN "01" => dout5 <= left_shifted_10;
      WHEN "10" => dout5 <= right_shifted_10;
      WHEN OTHERS => dout5 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_7combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_9' of 'mux'
   u_9combo_proc: PROCESS(q4, left_shifted_11, right_shifted_11, 
                          sel_val)
   BEGIN
      CASE sel_val IS
      WHEN "00" => dout8 <= q4;
      WHEN "01" => dout8 <= left_shifted_11;
      WHEN "10" => dout8 <= right_shifted_11;
      WHEN OTHERS => dout8 <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_9combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_13' of 'mux'
   u_13combo_proc: PROCESS(q1, left_shifted_00, right_shifted_00, 
                           sel_val)
   BEGIN
      CASE sel_val IS
      WHEN "00" => dout <= q1;
      WHEN "01" => dout <= left_shifted_00;
      WHEN "10" => dout <= right_shifted_00;
      WHEN OTHERS => dout <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_13combo_proc;

   -- Instance port mappings.
   U_11 : c2_t3_left_shifter
      PORT MAP (
         data_in  => q1,
         data_out => left_shifted_00
      );
   U_30 : c2_t3_left_shifter
      PORT MAP (
         data_in  => q2,
         data_out => left_shifted_01
      );
   U_32 : c2_t3_left_shifter
      PORT MAP (
         data_in  => q3,
         data_out => left_shifted_10
      );
   U_36 : c2_t3_left_shifter
      PORT MAP (
         data_in  => q4,
         data_out => left_shifted_11
      );
   U_12 : c2_t4_right_shifter
      PORT MAP (
         data_in  => q1,
         data_out => right_shifted_00
      );
   U_31 : c2_t4_right_shifter
      PORT MAP (
         data_in  => q2,
         data_out => right_shifted_01
      );
   U_33 : c2_t4_right_shifter
      PORT MAP (
         data_in  => q3,
         data_out => right_shifted_10
      );
   U_37 : c2_t4_right_shifter
      PORT MAP (
         data_in  => q4,
         data_out => right_shifted_11
      );

END struct;
