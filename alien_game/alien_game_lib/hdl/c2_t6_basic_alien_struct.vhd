-- VHDL Entity alien_game_lib.c2_t6_basic_alien.symbol
--
-- Created:
--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)
--          at - 11:43:15 12/ 7/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c2_t6_basic_alien IS
   PORT( 
      clk              : IN     std_logic;
      enable           : IN     std_logic;
      hit              : IN     std_logic;
      rst_n            : IN     std_logic;
      Alien_color      : OUT    std_logic_vector (23 DOWNTO 0);
      X_coordinate     : OUT    std_logic_vector (7 DOWNTO 0);
      Y_coordinate     : OUT    std_logic_vector (7 DOWNTO 0);
      alien_defeated   : OUT    std_logic;
      alien_health_out : OUT    std_logic_vector (1 DOWNTO 0)
   );

-- Declarations

END c2_t6_basic_alien ;

--
-- VHDL Architecture alien_game_lib.c2_t6_basic_alien.struct
--
-- Created:
--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)
--          at - 11:43:15 12/ 7/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY alien_game_lib;

ARCHITECTURE struct OF c2_t6_basic_alien IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL dout        : std_logic_vector(2 DOWNTO 0);
   SIGNAL dout1       : std_logic;
   SIGNAL dout2       : std_logic_vector(23 DOWNTO 0);
   SIGNAL dout3       : std_logic_vector(23 DOWNTO 0);
   SIGNAL dout4       : std_logic;
   SIGNAL dout5       : std_logic;
   SIGNAL dout6       : std_logic_vector(23 DOWNTO 0);
   SIGNAL dout7       : std_logic_vector(23 DOWNTO 0);
   SIGNAL dout8       : std_logic;
   SIGNAL dout9       : std_logic;
   SIGNAL one_hot_out : std_logic_vector(7 DOWNTO 0);
   SIGNAL q           : std_logic_vector(2 DOWNTO 0);
   SIGNAL q2          : std_logic;
   SIGNAL q3          : std_logic_vector(2 DOWNTO 0);
   SIGNAL result      : std_logic_vector(2 DOWNTO 0);
   SIGNAL result1     : std_logic_vector(2 DOWNTO 0);
   SIGNAL result2     : std_logic_vector(2 DOWNTO 0);

   -- Implicit buffer signal declarations
   SIGNAL Y_coordinate_internal     : std_logic_vector (7 DOWNTO 0);
   SIGNAL alien_health_out_internal : std_logic_vector (1 DOWNTO 0);


   -- ModuleWare signal declarations(v1.12) for instance 'U_0' of 'adff'
   SIGNAL mw_U_0reg_cval : std_logic_vector(2 DOWNTO 0);

   -- ModuleWare signal declarations(v1.12) for instance 'U_6' of 'adff'
   SIGNAL mw_U_6reg_cval : std_logic_vector(7 DOWNTO 0);

   -- ModuleWare signal declarations(v1.12) for instance 'U_8' of 'adff'
   SIGNAL mw_U_8reg_cval : std_logic;

   -- ModuleWare signal declarations(v1.12) for instance 'U_14' of 'adff'
   SIGNAL mw_U_14reg_cval : std_logic_vector(2 DOWNTO 0);

   -- Component Declarations
   COMPONENT c1_t2_incrementer
   PORT (
      value  : IN     std_logic_vector (2 DOWNTO 0);
      result : OUT    std_logic_vector (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c1_t3_decrementer
   PORT (
      value  : IN     std_logic_vector (2 DOWNTO 0);
      result : OUT    std_logic_vector (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c2_t2_bin_to_onehot
   PORT (
      binary_in   : IN     std_logic_vector (2 DOWNTO 0);
      one_hot_out : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c6_t2_alien_health
   PORT (
      clk          : IN     std_logic ;
      hit_in       : IN     std_logic ;
      rst_n        : IN     std_logic ;
      defeated_out : OUT    std_logic ;
      health_out   : OUT    std_logic_vector (1 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : c1_t2_incrementer USE ENTITY alien_game_lib.c1_t2_incrementer;
   FOR ALL : c1_t3_decrementer USE ENTITY alien_game_lib.c1_t3_decrementer;
   FOR ALL : c2_t2_bin_to_onehot USE ENTITY alien_game_lib.c2_t2_bin_to_onehot;
   FOR ALL : c6_t2_alien_health USE ENTITY alien_game_lib.c6_t2_alien_health;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_0' of 'adff'
   q <= mw_U_0reg_cval;
   u_0seq_proc: PROCESS (clk, rst_n)
   BEGIN
      IF (rst_n = '0') THEN
         mw_U_0reg_cval <= "000";
      ELSIF (clk'EVENT AND clk='1') THEN
         IF (enable = '1') THEN
            mw_U_0reg_cval <= dout;
         END IF;
      END IF;
   END PROCESS u_0seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_6' of 'adff'
   X_coordinate <= mw_U_6reg_cval;
   u_6seq_proc: PROCESS (clk, rst_n)
   BEGIN
      IF (rst_n = '0') THEN
         mw_U_6reg_cval <= x"08";
      ELSIF (clk'EVENT AND clk='1') THEN
         IF (dout9 = '1') THEN
            mw_U_6reg_cval <= one_hot_out;
         END IF;
      END IF;
   END PROCESS u_6seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_8' of 'adff'
   q2 <= mw_U_8reg_cval;
   u_8seq_proc: PROCESS (clk, rst_n)
   BEGIN
      IF (rst_n = '0') THEN
         mw_U_8reg_cval <= '0';
      ELSIF (clk'EVENT AND clk='1') THEN
         IF (dout1 = '1') THEN
            mw_U_8reg_cval <= dout5;
         END IF;
      END IF;
   END PROCESS u_8seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_14' of 'adff'
   q3 <= mw_U_14reg_cval;
   u_14seq_proc: PROCESS (clk, rst_n)
   BEGIN
      IF (rst_n = '0') THEN
         mw_U_14reg_cval <= "000";
      ELSIF (clk'EVENT AND clk='1') THEN
         IF (enable = '1') THEN
            mw_U_14reg_cval <= result2;
         END IF;
      END IF;
   END PROCESS u_14seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_9' of 'and'
   dout5 <= q(2) AND q(1) AND q(0);

   -- ModuleWare code(v1.12) for instance 'U_11' of 'and'
   dout4 <= NOT(q(2)) AND NOT(q(1)) AND NOT(q(0));

   -- ModuleWare code(v1.12) for instance 'U_16' of 'and'
   dout8 <= alien_health_out_internal(0)
            AND NOT(alien_health_out_internal(1));

   -- ModuleWare code(v1.12) for instance 'const_000000' of 'constval'
   dout2 <= x"000000";

   -- ModuleWare code(v1.12) for instance 'const_0000FF' of 'constval'
   dout6 <= x"0000FF";

   -- ModuleWare code(v1.12) for instance 'const_00FF00' of 'constval'
   dout3 <= x"00FF00";

   -- ModuleWare code(v1.12) for instance 'const_00FFFF' of 'constval'
   dout7 <= x"00FFFF";

   -- ModuleWare code(v1.12) for instance 'U_2' of 'mux'
   u_2combo_proc: PROCESS(result, result1, q2)
   BEGIN
      CASE q2 IS
      WHEN '0' => dout <= result;
      WHEN '1' => dout <= result1;
      WHEN OTHERS => dout <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_2combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_7' of 'mux'
   u_7combo_proc: PROCESS(dout2, dout6, dout7, dout3, 
                          alien_health_out_internal)
   BEGIN
      CASE alien_health_out_internal IS
      WHEN "00" => Alien_color <= dout2;
      WHEN "01" => Alien_color <= dout6;
      WHEN "10" => Alien_color <= dout7;
      WHEN "11" => Alien_color <= dout3;
      WHEN OTHERS => Alien_color <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_7combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_10' of 'or'
   dout9 <= dout8 OR Y_coordinate_internal(0);

   -- ModuleWare code(v1.12) for instance 'U_12' of 'or'
   dout1 <= dout4 OR dout5;

   -- Instance port mappings.
   U_3 : c1_t2_incrementer
      PORT MAP (
         value  => q,
         result => result
      );
   U_15 : c1_t2_incrementer
      PORT MAP (
         value  => q3,
         result => result2
      );
   U_4 : c1_t3_decrementer
      PORT MAP (
         value  => q,
         result => result1
      );
   U_1 : c2_t2_bin_to_onehot
      PORT MAP (
         binary_in   => q,
         one_hot_out => one_hot_out
      );
   U_13 : c2_t2_bin_to_onehot
      PORT MAP (
         binary_in   => q3,
         one_hot_out => Y_coordinate_internal
      );
   U_5 : c6_t2_alien_health
      PORT MAP (
         clk          => clk,
         hit_in       => hit,
         rst_n        => rst_n,
         defeated_out => alien_defeated,
         health_out   => alien_health_out_internal
      );

   -- Implicit buffered output assignments
   Y_coordinate     <= Y_coordinate_internal;
   alien_health_out <= alien_health_out_internal;

END struct;
