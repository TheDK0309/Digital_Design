<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 23:41:35 on 12/ 6/2020 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c2_t6_basic_alien.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)</span>
<span class=C>--          at - 13:55:56 12&#47; 6&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c2_t6_basic_alien <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      hit            : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span>;
      Alien_color    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      X_coordinate   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      Y_coordinate   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      alien_defeated : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c2_t6_basic_alien ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c2_t6_basic_alien.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)</span>
<span class=C>--          at - 22:36:41 12&#47; 6&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c2_t6_basic_alien <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> dout    : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout1   : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout2   : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout3   : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout4   : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout5   : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout6   : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> q       : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q1      : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> q2      : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> q3      : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> result  : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> result1 : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> result2 : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);

   <span class=C>-- Implicit buffer signal declarations</span>
   <span class=K>SIGNAL</span> alien_defeated_internal : <span class=T>std_logic</span>;


   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_0' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_0reg_cval : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_6' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_6reg_cval : <span class=T>std_logic</span>;

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_8' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_8reg_cval : <span class=T>std_logic</span>;

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_14' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_14reg_cval : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);

   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c1_t2_incrementer
   <span class=K>PORT</span> (
      value  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      result : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c1_t3_decrementer
   <span class=K>PORT</span> (
      value  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      result : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c2_t2_bin_to_onehot
   <span class=K>PORT</span> (
      binary_in   : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      one_hot_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c1_t2_incrementer <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c1_t2_incrementer;
   <span class=K>FOR</span> <span class=K>ALL</span> : c1_t3_decrementer <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c1_t3_decrementer;
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_t2_bin_to_onehot <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_t2_bin_to_onehot;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_0' of 'adff'</span>
   q <= mw_U_0reg_cval;
   u_0seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_0reg_cval <= <span class=S>"000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         <span class=K>IF</span> (enable = '1') <span class=K>THEN</span>
            mw_U_0reg_cval <= dout;
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_0seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_6' of 'adff'</span>
   q1 <= mw_U_6reg_cval;
   u_6seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_6reg_cval <= '0';
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         <span class=K>IF</span> (hit = '1') <span class=K>THEN</span>
            mw_U_6reg_cval <= hit;
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_6seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_8' of 'adff'</span>
   q2 <= mw_U_8reg_cval;
   u_8seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_8reg_cval <= '0';
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         <span class=K>IF</span> (dout1 = '1') <span class=K>THEN</span>
            mw_U_8reg_cval <= dout5;
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_8seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_14' of 'adff'</span>
   q3 <= mw_U_14reg_cval;
   u_14seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_14reg_cval <= <span class=S>"000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         <span class=K>IF</span> (enable = '1') <span class=K>THEN</span>
            mw_U_14reg_cval <= result2;
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_14seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_9' of 'and'</span>
   dout5 <= q(2) <span class=K>AND</span> q(1) <span class=K>AND</span> q(0);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_11' of 'and'</span>
   dout4 <= <span class=K>NOT</span>(q(2)) <span class=K>AND</span> <span class=K>NOT</span>(q(1)) <span class=K>AND</span> <span class=K>NOT</span>(q(0));

   <span class=C>-- ModuleWare code(v1.12) for instance 'const_0' of 'constval'</span>
   dout6 <= '0';

   <span class=C>-- ModuleWare code(v1.12) for instance 'const_000000' of 'constval'</span>
   dout3 <= x<span class=S>"000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'const_00FF00' of 'constval'</span>
   dout2 <= x<span class=S>"00FF00"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_2' of 'mux'</span>
   u_2combo_proc: <span class=K>PROCESS</span>(result, result1, q2)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> q2 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout <= result;
      <span class=K>WHEN</span> '1' => dout <= result1;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_2combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_7' of 'mux'</span>
   u_7combo_proc: <span class=K>PROCESS</span>(dout2, dout3, alien_defeated_internal)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> alien_defeated_internal <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => Alien_color <= dout2;
      <span class=K>WHEN</span> '1' => Alien_color <= dout3;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => Alien_color <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_7combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_12' of 'or'</span>
   dout1 <= dout4 <span class=K>OR</span> dout5;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_10' of 'or1'</span>
   alien_defeated_internal <= dout6 <span class=K>OR</span> q1;

   <span class=C>-- Instance port mappings.</span>
   U_3 : c1_t2_incrementer
      <span class=K>PORT</span> <span class=K>MAP</span> (
         value  => q,
         result => result
      );
   U_15 : c1_t2_incrementer
      <span class=K>PORT</span> <span class=K>MAP</span> (
         value  => q3,
         result => result2
      );
   U_4 : c1_t3_decrementer
      <span class=K>PORT</span> <span class=K>MAP</span> (
         value  => q,
         result => result1
      );
   U_1 : c2_t2_bin_to_onehot
      <span class=K>PORT</span> <span class=K>MAP</span> (
         binary_in   => q,
         one_hot_out => X_coordinate
      );
   U_13 : c2_t2_bin_to_onehot
      <span class=K>PORT</span> <span class=K>MAP</span> (
         binary_in   => q3,
         one_hot_out => Y_coordinate
      );

   <span class=C>-- Implicit buffered output assignments</span>
   alien_defeated <= alien_defeated_internal;

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
