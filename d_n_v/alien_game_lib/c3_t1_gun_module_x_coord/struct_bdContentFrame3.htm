<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 23:41:38 on 12/ 6/2020 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c3_t1_gun_module_x_coord.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)</span>
<span class=C>--          at - 18:46:38 10&#47;10&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c3_t1_gun_module_x_coord <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk        : <span class=A>IN</span>     <span class=T>std_logic</span>;
      gun_px_idx : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      rst_n      : <span class=A>IN</span>     <span class=T>std_logic</span>;
      sel_val    : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      X_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c3_t1_gun_module_x_coord ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c3_t1_gun_module_x_coord.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)</span>
<span class=C>--          at - 22:02:49 10&#47;10&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c3_t1_gun_module_x_coord <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> dout             : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout4            : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout5            : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout8            : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> left_shifted_00  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> left_shifted_01  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> left_shifted_10  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> left_shifted_11  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q1               : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q2               : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q3               : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q4               : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> right_shifted_00 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> right_shifted_01 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> right_shifted_10 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> right_shifted_11 : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);


   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_1' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_1reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_10' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_10reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_15' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_15reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_21' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_21reg_cval : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c2_t3_left_shifter
   <span class=K>PORT</span> (
      data_in  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      data_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c2_t4_right_shifter
   <span class=K>PORT</span> (
      data_in  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      data_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_t3_left_shifter <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_t3_left_shifter;
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_t4_right_shifter <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_t4_right_shifter;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_1' of 'adff'</span>
   q1 <= mw_U_1reg_cval;
   u_1seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_1reg_cval <= x<span class=S>"10"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_1reg_cval <= dout;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_1seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_10' of 'adff'</span>
   q2 <= mw_U_10reg_cval;
   u_10seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_10reg_cval <= x<span class=S>"08"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_10reg_cval <= dout4;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_10seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_15' of 'adff'</span>
   q3 <= mw_U_15reg_cval;
   u_15seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_15reg_cval <= x<span class=S>"04"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_15reg_cval <= dout5;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_15seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_21' of 'adff'</span>
   q4 <= mw_U_21reg_cval;
   u_21seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_21reg_cval <= x<span class=S>"08"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_21reg_cval <= dout8;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_21seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_2' of 'mux'</span>
   u_2combo_proc: <span class=K>PROCESS</span>(q1, q2, q3, q4, gun_px_idx)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> gun_px_idx <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => X_coord <= q1;
      <span class=K>WHEN</span> <span class=S>"01"</span> => X_coord <= q2;
      <span class=K>WHEN</span> <span class=S>"10"</span> => X_coord <= q3;
      <span class=K>WHEN</span> <span class=S>"11"</span> => X_coord <= q4;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => X_coord <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_2combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_6' of 'mux'</span>
   u_6combo_proc: <span class=K>PROCESS</span>(q2, left_shifted_01, right_shifted_01,
                          sel_val)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> sel_val <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => dout4 <= q2;
      <span class=K>WHEN</span> <span class=S>"01"</span> => dout4 <= left_shifted_01;
      <span class=K>WHEN</span> <span class=S>"10"</span> => dout4 <= right_shifted_01;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout4 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_6combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_7' of 'mux'</span>
   u_7combo_proc: <span class=K>PROCESS</span>(q3, left_shifted_10, right_shifted_10,
                          sel_val)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> sel_val <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => dout5 <= q3;
      <span class=K>WHEN</span> <span class=S>"01"</span> => dout5 <= left_shifted_10;
      <span class=K>WHEN</span> <span class=S>"10"</span> => dout5 <= right_shifted_10;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout5 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_7combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_9' of 'mux'</span>
   u_9combo_proc: <span class=K>PROCESS</span>(q4, left_shifted_11, right_shifted_11,
                          sel_val)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> sel_val <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => dout8 <= q4;
      <span class=K>WHEN</span> <span class=S>"01"</span> => dout8 <= left_shifted_11;
      <span class=K>WHEN</span> <span class=S>"10"</span> => dout8 <= right_shifted_11;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout8 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_9combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_13' of 'mux'</span>
   u_13combo_proc: <span class=K>PROCESS</span>(q1, left_shifted_00, right_shifted_00,
                           sel_val)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> sel_val <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => dout <= q1;
      <span class=K>WHEN</span> <span class=S>"01"</span> => dout <= left_shifted_00;
      <span class=K>WHEN</span> <span class=S>"10"</span> => dout <= right_shifted_00;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_13combo_proc;

   <span class=C>-- Instance port mappings.</span>
   U_11 : c2_t3_left_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         data_in  => q1,
         data_out => left_shifted_00
      );
   U_30 : c2_t3_left_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         data_in  => q2,
         data_out => left_shifted_01
      );
   U_32 : c2_t3_left_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         data_in  => q3,
         data_out => left_shifted_10
      );
   U_36 : c2_t3_left_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         data_in  => q4,
         data_out => left_shifted_11
      );
   U_12 : c2_t4_right_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         data_in  => q1,
         data_out => right_shifted_00
      );
   U_31 : c2_t4_right_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         data_in  => q2,
         data_out => right_shifted_01
      );
   U_33 : c2_t4_right_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         data_in  => q3,
         data_out => right_shifted_10
      );
   U_37 : c2_t4_right_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         data_in  => q4,
         data_out => right_shifted_11
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
