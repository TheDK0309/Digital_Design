<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 23:41:50 on 12/ 6/2020 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c6_t1_victory_effect_fsm.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)</span>
<span class=C>--          at - 22:25:22 12&#47; 6&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c6_t1_victory_effect_fsm <span class=K>IS</span>
   <span class=K>PORT</span>(
      alien_defeated : <span class=A>IN</span>     <span class=T>std_logic</span>;
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst            : <span class=A>IN</span>     <span class=T>std_logic</span>;
      color          : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_coord        : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord        : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c6_t1_victory_effect_fsm ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c6_t1_victory_effect_fsm.fsm</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)</span>
<span class=C>--          at - 22:25:22 12&#47; 6&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ARCHITECTURE</span> fsm <span class=K>OF</span> c6_t1_victory_effect_fsm <span class=K>IS</span>

   <span class=K>TYPE</span> STATE_TYPE <span class=K>IS</span> (
      px1,
      px2,
      px3,
      px4,
      px5,
      px6,
      px7,
      px8,
      px9,
      px10,
      px11,
      s11,
      Idle
   );

   <span class=C>-- Declare current and next state signals</span>
   <span class=K>SIGNAL</span> current_state : STATE_TYPE;
   <span class=K>SIGNAL</span> next_state : STATE_TYPE;

   <span class=C>-- Declare Wait State internal signals</span>
   <span class=K>SIGNAL</span> csm_timer : <span class=T>std_logic_vector</span>(3 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_next_timer : <span class=T>std_logic_vector</span>(3 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_timeout : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> csm_to_s11 : <span class=T>std_logic</span>;

<span class=K>BEGIN</span>

   <span class=C>-----------------------------------------------------------------</span>
   clocked_proc : <span class=K>PROCESS</span> (
      clk,
      rst
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst = '0') <span class=K>THEN</span>
         current_state <= Idle;
         csm_timer <= (<span class=K>OTHERS</span> => '0');
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk = '1') <span class=K>THEN</span>
         current_state <= next_state;
         csm_timer <= csm_next_timer;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> clocked_proc;

   <span class=C>-----------------------------------------------------------------</span>
   nextstate_proc : <span class=K>PROCESS</span> (
      alien_defeated,
      csm_timeout,
      current_state
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default assignments to Wait State entry flags</span>
      csm_to_s11 <= '0';
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> px1 =>
            next_state <= px2;
         <span class=K>WHEN</span> px2 =>
            next_state <= px3;
         <span class=K>WHEN</span> px3 =>
            next_state <= px4;
         <span class=K>WHEN</span> px4 =>
            next_state <= px5;
         <span class=K>WHEN</span> px5 =>
            next_state <= px6;
         <span class=K>WHEN</span> px6 =>
            next_state <= px7;
         <span class=K>WHEN</span> px7 =>
            next_state <= px8;
         <span class=K>WHEN</span> px8 =>
            next_state <= px9;
         <span class=K>WHEN</span> px9 =>
            next_state <= px10;
         <span class=K>WHEN</span> px10 =>
            next_state <= px11;
         <span class=K>WHEN</span> px11 =>
            next_state <= s11;
            csm_to_s11 <= '1';
         <span class=K>WHEN</span> s11 =>
            <span class=K>IF</span> (csm_timeout = '1') <span class=K>THEN</span>
               next_state <= Idle;
            <span class=K>ELSE</span>
               next_state <= s11;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> Idle =>
            <span class=K>IF</span> (alien_defeated = '1') <span class=K>THEN</span>
               next_state <= px1;
            <span class=K>ELSE</span>
               next_state <= Idle;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            next_state <= Idle;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> nextstate_proc;

   <span class=C>-----------------------------------------------------------------</span>
   output_proc : <span class=K>PROCESS</span> (
      current_state
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default Assignment</span>
      x_coord <= x<span class=S>"00"</span>;
      y_coord <= x<span class=S>"00"</span>;

      <span class=C>-- Combined Actions</span>
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> px1 =>
            x_coord <= x<span class=S>"01"</span>;
            y_coord <= x<span class=S>"02"</span>;
            color <= x<span class=S>"66ffcc"</span>;
         <span class=K>WHEN</span> px2 =>
            x_coord <= x<span class=S>"01"</span>;
            y_coord <= x<span class=S>"04"</span>;
            color <= x<span class=S>"66ffcc"</span>;
         <span class=K>WHEN</span> px3 =>
            x_coord <= x<span class=S>"01"</span>;
            y_coord <= x<span class=S>"08"</span>;
            color <= x<span class=S>"66ffcc"</span>;
         <span class=K>WHEN</span> px4 =>
            x_coord <= x<span class=S>"02"</span>;
            y_coord <= x<span class=S>"04"</span>;
            color <= x<span class=S>"66ffcc"</span>;
         <span class=K>WHEN</span> px5 =>
            x_coord <= x<span class=S>"04"</span>;
            y_coord <= x<span class=S>"02"</span>;
            color <= x<span class=S>"66ffcc"</span>;
         <span class=K>WHEN</span> px6 =>
            x_coord <= x<span class=S>"04"</span>;
            y_coord <= x<span class=S>"08"</span>;
            color <= x<span class=S>"66ffcc"</span>;
         <span class=K>WHEN</span> px7 =>
            x_coord <= x<span class=S>"10"</span>;
            y_coord <= x<span class=S>"02"</span>;
            color <= x<span class=S>"66ffcc"</span>;
         <span class=K>WHEN</span> px8 =>
            x_coord <= x<span class=S>"20"</span>;
            y_coord <= x<span class=S>"02"</span>;
            color <= x<span class=S>"66ffcc"</span>;
         <span class=K>WHEN</span> px9 =>
            x_coord <= x<span class=S>"20"</span>;
            y_coord <= x<span class=S>"04"</span>;
            color <= x<span class=S>"66ffcc"</span>;
         <span class=K>WHEN</span> px10 =>
            x_coord <= x<span class=S>"20"</span>;
            y_coord <= x<span class=S>"08"</span>;
            color <= x<span class=S>"66ffcc"</span>;
         <span class=K>WHEN</span> px11 =>
            x_coord <= x<span class=S>"40"</span>;
            y_coord <= x<span class=S>"02"</span>;
            color <= x<span class=S>"66ffcc"</span>;
         <span class=K>WHEN</span> s11 =>
            x_coord <= x<span class=S>"00"</span>;
            y_coord <= x<span class=S>"00"</span>;
            color <= x<span class=S>"000000"</span>;
         <span class=K>WHEN</span> Idle =>
            x_coord <= x<span class=S>"00"</span>;
            y_coord <= x<span class=S>"00"</span>;
            color <= x<span class=S>"000000"</span>;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            <span class=K>NULL</span>;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> output_proc;

   <span class=C>-----------------------------------------------------------------</span>
   csm_wait_combo_proc: <span class=K>PROCESS</span> (
      csm_timer,
      csm_to_s11
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>VARIABLE</span> csm_temp_timeout : <span class=T>std_logic</span>;
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (unsigned(csm_timer) = 0) <span class=K>THEN</span>
         csm_temp_timeout := '1';
      <span class=K>ELSE</span>
         csm_temp_timeout := '0';
      <span class=K>END</span> <span class=K>IF</span>;

      <span class=K>IF</span> (csm_to_s11 = '1') <span class=K>THEN</span>
         csm_next_timer <= <span class=S>"1100"</span>; <span class=C>-- no cycles(13)-1=12</span>
      <span class=K>ELSE</span>
         <span class=K>IF</span> (csm_temp_timeout = '1') <span class=K>THEN</span>
            csm_next_timer <= (<span class=K>OTHERS</span>=>'0');
         <span class=K>ELSE</span>
            csm_next_timer <= unsigned(csm_timer) - '1';
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
      csm_timeout <= csm_temp_timeout;
   <span class=K>END</span> <span class=K>PROCESS</span> csm_wait_combo_proc;

<span class=K>END</span> fsm;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
