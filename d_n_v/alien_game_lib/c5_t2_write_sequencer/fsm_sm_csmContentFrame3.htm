<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 23:41:46 on 12/ 6/2020 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c5_t2_write_sequencer.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)</span>
<span class=C>--          at - 12:39:19 12&#47; 6&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c5_t2_write_sequencer <span class=K>IS</span>
   <span class=K>PORT</span>(
      alien_defeated : <span class=A>IN</span>     <span class=T>std_logic</span>;
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span>;
      write_ready    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable         : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      frame_done     : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      gun_px_idx     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      module_select  : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      write          : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c5_t2_write_sequencer ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c5_t2_write_sequencer.fsm</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)</span>
<span class=C>--          at - 21:59:09 12&#47; 6&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;

<span class=K>ARCHITECTURE</span> fsm <span class=K>OF</span> c5_t2_write_sequencer <span class=K>IS</span>

   <span class=C>-- Architecture Declarations</span>
   <span class=K>SIGNAL</span> delay : <span class=T>std_logic</span>;

   <span class=K>TYPE</span> STATE_TYPE <span class=K>IS</span> (
      Write00,
      Write01,
      Write10,
      Write11,
      Idle,
      WriteDone,
      WriteEnable,
      WriteStart,
      sWait,
      WriteBullet,
      WriteDefeatedEffect,
      sWaitDefeated
   );

   <span class=C>-- Declare current and next state signals</span>
   <span class=K>SIGNAL</span> current_state : STATE_TYPE;
   <span class=K>SIGNAL</span> next_state : STATE_TYPE;

   <span class=C>-- Declare Wait State internal signals</span>
   <span class=K>SIGNAL</span> csm_timer : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_next_timer : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_timeout : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> csm_to_sWait : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> csm_to_sWaitDefeated : <span class=T>std_logic</span>;

<span class=K>BEGIN</span>

   <span class=C>-----------------------------------------------------------------</span>
   clocked_proc : <span class=K>PROCESS</span> (
      clk,
      rst_n
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         current_state <= Idle;
         csm_timer <= (<span class=K>OTHERS</span> => '0');
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk = '1') <span class=K>THEN</span>
         current_state <= next_state;
         csm_timer <= csm_next_timer;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> clocked_proc;

   <span class=C>-----------------------------------------------------------------</span>
   nextstate_proc : <span class=K>PROCESS</span> (
      alien_defeated,
      csm_timeout,
      current_state,
      write_ready
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default assignments to Wait State entry flags</span>
      csm_to_sWait <= '0';
      csm_to_sWaitDefeated <= '0';
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> Write00 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= Write01;
            <span class=K>ELSE</span>
               next_state <= Write00;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> Write01 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= Write10;
            <span class=K>ELSE</span>
               next_state <= Write01;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> Write10 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= Write11;
            <span class=K>ELSE</span>
               next_state <= Write10;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> Write11 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= WriteBullet;
            <span class=K>ELSE</span>
               next_state <= Write11;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> Idle =>
            <span class=K>IF</span> (write_ready = '1' <span class=K>AND</span> alien_defeated = '1') <span class=K>THEN</span>
               next_state <= WriteDefeatedEffect;
            <span class=K>ELSIF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= WriteStart;
            <span class=K>ELSIF</span> (write_ready = '0') <span class=K>THEN</span>
               next_state <= Idle;
            <span class=K>ELSE</span>
               next_state <= Idle;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> WriteDone =>
            <span class=K>IF</span> (write_ready = '1' <span class=K>OR</span> write_ready = '0') <span class=K>THEN</span>
               next_state <= sWait;
               csm_to_sWait <= '1';
            <span class=K>ELSE</span>
               next_state <= WriteDone;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> WriteEnable =>
            <span class=K>IF</span> (write_ready = '1' <span class=K>OR</span> write_ready = '0') <span class=K>THEN</span>
               next_state <= Idle;
            <span class=K>ELSE</span>
               next_state <= WriteEnable;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> WriteStart =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= Write00;
            <span class=K>ELSE</span>
               next_state <= WriteStart;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> sWait =>
            <span class=K>IF</span> (csm_timeout = '1') <span class=K>THEN</span>
               next_state <= WriteEnable;
            <span class=K>ELSE</span>
               next_state <= sWait;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> WriteBullet =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= WriteDone;
            <span class=K>ELSE</span>
               next_state <= WriteBullet;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> WriteDefeatedEffect =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= sWaitDefeated;
               csm_to_sWaitDefeated <= '1';
            <span class=K>ELSE</span>
               next_state <= WriteDefeatedEffect;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> sWaitDefeated =>
            <span class=K>IF</span> (csm_timeout = '1' <span class=K>AND</span> (write_ready = '1')) <span class=K>THEN</span>
               next_state <= WriteDone;
            <span class=K>ELSE</span>
               next_state <= sWaitDefeated;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            next_state <= Idle;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> nextstate_proc;

   <span class=C>-----------------------------------------------------------------</span>
   output_proc : <span class=K>PROCESS</span> (
      current_state
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default Assignment</span>
      enable <= '0';
      frame_done <= '0';
      gun_px_idx <= <span class=S>"00"</span>;
      module_select <= <span class=S>"00"</span>;
      write <= '0';
      <span class=C>-- Default Assignment To Internals</span>
      delay <= '1';

      <span class=C>-- Combined Actions</span>
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> Write00 =>
            gun_px_idx <= <span class=S>"00"</span> ;
            module_select <= <span class=S>"01"</span> ;
            write <= '1' ;
         <span class=K>WHEN</span> Write01 =>
            gun_px_idx <= <span class=S>"01"</span>;
            module_select <= <span class=S>"01"</span>;
            write <= '1';
         <span class=K>WHEN</span> Write10 =>
            gun_px_idx <= <span class=S>"10"</span>;
            module_select <= <span class=S>"01"</span>;
            write <= '1';
         <span class=K>WHEN</span> Write11 =>
            gun_px_idx <= <span class=S>"11"</span>;
            module_select <= <span class=S>"01"</span>;
            write <= '1';
         <span class=K>WHEN</span> Idle =>
            frame_done <= '0';
             write <= '0' ;
            gun_px_idx <= <span class=S>"00"</span> ;
            module_select <= <span class=S>"00"</span> ;
            enable <= '0';
            delay <= '0';
         <span class=K>WHEN</span> WriteDone =>
            gun_px_idx <= <span class=S>"00"</span>;
            module_select <= <span class=S>"00"</span>;
            write <= '0';
            frame_done <= '1';
         <span class=K>WHEN</span> WriteEnable =>
            frame_done <= '0';
            enable <= '1';
            write <= '0' ;
            module_select <= <span class=S>"00"</span> ;
         <span class=K>WHEN</span> WriteStart =>
            write <= '1' ;
            module_select <= <span class=S>"00"</span>;
         <span class=K>WHEN</span> WriteBullet =>
            gun_px_idx <= <span class=S>"00"</span> ;
            module_select <= <span class=S>"10"</span>;
            write <= '1' ;
         <span class=K>WHEN</span> WriteDefeatedEffect =>
            gun_px_idx <= <span class=S>"00"</span>;
            module_select <= <span class=S>"11"</span>;
            write <= '1';
         <span class=K>WHEN</span> sWaitDefeated =>
            gun_px_idx <= <span class=S>"00"</span>;
            module_select <= <span class=S>"11"</span>;
            write <= '1';
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            <span class=K>NULL</span>;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> output_proc;

   <span class=C>-----------------------------------------------------------------</span>
   csm_wait_combo_proc: <span class=K>PROCESS</span> (
      csm_timer,
      csm_to_sWait,
      csm_to_sWaitDefeated
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>VARIABLE</span> csm_temp_timeout : <span class=T>std_logic</span>;
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (unsigned(csm_timer) = 0) <span class=K>THEN</span>
         csm_temp_timeout := '1';
      <span class=K>ELSE</span>
         csm_temp_timeout := '0';
      <span class=K>END</span> <span class=K>IF</span>;

      <span class=K>IF</span> (csm_to_sWait = '1') <span class=K>THEN</span>
         csm_next_timer <= <span class=S>"101111101011110000011111"</span>; <span class=C>-- no cycles(12500000)-1=12499999</span>
      <span class=K>ELSIF</span> (csm_to_sWaitDefeated = '1') <span class=K>THEN</span>
         csm_next_timer <= <span class=S>"000000000000000000010110"</span>; <span class=C>-- no cycles(23)-1=22</span>
      <span class=K>ELSE</span>
         <span class=K>IF</span> (csm_temp_timeout = '1') <span class=K>THEN</span>
            csm_next_timer <= (<span class=K>OTHERS</span>=>'0');
         <span class=K>ELSE</span>
            csm_next_timer <= unsigned(csm_timer) - '1';
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
      csm_timeout <= csm_temp_timeout;
   <span class=K>END</span> <span class=K>PROCESS</span> csm_wait_combo_proc;

<span class=K>END</span> fsm;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
