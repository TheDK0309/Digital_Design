<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 23:41:49 on 12/ 6/2020 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c6_t1_victory_effect.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - DELL.UNKNOWN (DESKTOP-3FDMB5C)</span>
<span class=C>--          at - 19:31:25 11&#47;27&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c6_t1_victory_effect <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk          : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n        : <span class=A>IN</span>     <span class=T>std_logic</span>;
      Color        : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      X_coordinate : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      Y_coordinate : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c6_t1_victory_effect ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c6_t1_victory_effect.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)</span>
<span class=C>--          at - 21:03:04 11&#47;29&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c6_t1_victory_effect <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> dout   : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout1  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout2  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout3  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout4  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout5  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout6  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout7  : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q      : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> result : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);


   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_0' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_0reg_cval : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);

   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c1_t2_incrementer
   <span class=K>PORT</span> (
      value  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      result : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c2_t2_bin_to_onehot
   <span class=K>PORT</span> (
      binary_in   : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (2 <span class=K>DOWNTO</span> 0);
      one_hot_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c1_t2_incrementer <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c1_t2_incrementer;
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_t2_bin_to_onehot <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_t2_bin_to_onehot;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_0' of 'adff'</span>
   q <= mw_U_0reg_cval;
   u_0seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_0reg_cval <= <span class=S>"000"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_0reg_cval <= result;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_0seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_1' of 'constval'</span>
   Color <= x<span class=S>"00FF00"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_4' of 'constval'</span>
   dout1 <= <span class=S>"01001010"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_5' of 'constval'</span>
   dout2 <= <span class=S>"11110101"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_6' of 'constval'</span>
   dout3 <= <span class=S>"00100001"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_7' of 'constval'</span>
   dout <= <span class=S>"00111100"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_9' of 'constval'</span>
   dout4 <= <span class=S>"00100001"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_10' of 'constval'</span>
   dout5 <= <span class=S>"11110101"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_11' of 'constval'</span>
   dout6 <= <span class=S>"01001010"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_12' of 'constval'</span>
   dout7 <= <span class=S>"11111100"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_8' of 'mux'</span>
   u_8combo_proc: <span class=K>PROCESS</span>(dout, dout1, dout2, dout3, dout4, dout5, dout6,
                          dout7, q)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> q <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"000"</span> => Y_coordinate <= dout;
      <span class=K>WHEN</span> <span class=S>"001"</span> => Y_coordinate <= dout1;
      <span class=K>WHEN</span> <span class=S>"010"</span> => Y_coordinate <= dout2;
      <span class=K>WHEN</span> <span class=S>"011"</span> => Y_coordinate <= dout3;
      <span class=K>WHEN</span> <span class=S>"100"</span> => Y_coordinate <= dout4;
      <span class=K>WHEN</span> <span class=S>"101"</span> => Y_coordinate <= dout5;
      <span class=K>WHEN</span> <span class=S>"110"</span> => Y_coordinate <= dout6;
      <span class=K>WHEN</span> <span class=S>"111"</span> => Y_coordinate <= dout7;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => Y_coordinate <= (<span class=K>OTHERS</span> => '0');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_8combo_proc;

   <span class=C>-- Instance port mappings.</span>
   U_3 : c1_t2_incrementer
      <span class=K>PORT</span> <span class=K>MAP</span> (
         value  => q,
         result => result
      );
   U_2 : c2_t2_bin_to_onehot
      <span class=K>PORT</span> <span class=K>MAP</span> (
         binary_in   => q,
         one_hot_out => X_coordinate
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
