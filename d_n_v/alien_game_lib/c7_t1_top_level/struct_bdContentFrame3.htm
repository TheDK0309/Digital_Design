<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 23:41:55 on 12/ 6/2020 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c7_t1_top_level.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)</span>
<span class=C>--          at - 23:27:48 12&#47; 6&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c7_t1_top_level <span class=K>IS</span>
   <span class=K>PORT</span>(
      btn     : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk     : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      channel : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      lat     : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      s_clk   : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      s_rst   : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      s_sda   : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      sb      : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c7_t1_top_level ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c7_t1_top_level.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - Minh.UNKNOWN (DESKTOP-R6EVFEE)</span>
<span class=C>--          at - 23:27:48 12&#47; 6&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c7_t1_top_level <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> Alien_color    : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> Bullet_X_coord : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> Bullet_Y_coord : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> Color          : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> Gun_color      : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> X_coord        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> X_coordinate   : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> Y_coord        : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> Y_coordinate   : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> alien_defeated : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> data_out       : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout           : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout1          : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout2          : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout3          : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout4          : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout5          : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout6          : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> enable         : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> frame_done     : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> gun_px_idx     : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> hit            : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> module_select  : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> w_rdy          : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> write          : <span class=T>std_logic</span>;


   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c2_t4_right_shifter
   <span class=K>PORT</span> (
      data_in  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      data_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c2_t6_basic_alien
   <span class=K>PORT</span> (
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit            : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      Alien_color    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      X_coordinate   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      Y_coordinate   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      alien_defeated : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c3_t1_gun_module
   <span class=K>PORT</span> (
      btn        : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk        : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable     : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_px_idx : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      rst_n      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      Gun_color  : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      X_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      Y_coord    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c3_t2_bullet
   <span class=K>PORT</span> (
      Gun_X_coord    : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      btn            : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (3 <span class=K>DOWNTO</span> 0);
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      Bullet_X_coord : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      Bullet_Y_coord : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      Color          : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c5_t1_hit_detector
   <span class=K>PORT</span> (
      alien_x  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      alien_y  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      btn      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      bullet_x : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      bullet_y : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      gun_x    : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      mode_in  : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n    : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      hit      : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c5_t2_write_sequencer
   <span class=K>PORT</span> (
      alien_defeated : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst_n          : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      write_ready    : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      enable         : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      frame_done     : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      gun_px_idx     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      module_select  : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      write          : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c6_t1_victory_effect_fsm
   <span class=K>PORT</span> (
      alien_defeated : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      clk            : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      rst            : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      color          : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_coord        : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord        : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> c7_t1_integration
   <span class=K>PORT</span> (
      clk           : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      frame_written : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      pixd_in       : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      rst_n         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      write         : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      xw            : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      yw            : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      channel       : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      lat           : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      s_clk         : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      s_rst         : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      s_sda         : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      sb            : <span class=A>OUT</span>    <span class=T>std_logic</span> ;
      w_rdy         : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_t4_right_shifter <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_t4_right_shifter;
   <span class=K>FOR</span> <span class=K>ALL</span> : c2_t6_basic_alien <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c2_t6_basic_alien;
   <span class=K>FOR</span> <span class=K>ALL</span> : c3_t1_gun_module <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c3_t1_gun_module;
   <span class=K>FOR</span> <span class=K>ALL</span> : c3_t2_bullet <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c3_t2_bullet;
   <span class=K>FOR</span> <span class=K>ALL</span> : c5_t1_hit_detector <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c5_t1_hit_detector;
   <span class=K>FOR</span> <span class=K>ALL</span> : c5_t2_write_sequencer <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c5_t2_write_sequencer;
   <span class=K>FOR</span> <span class=K>ALL</span> : c6_t1_victory_effect_fsm <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c6_t1_victory_effect_fsm;
   <span class=K>FOR</span> <span class=K>ALL</span> : c7_t1_integration <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c7_t1_integration;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'const_0' of 'constval'</span>
   dout <= '0';

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_7' of 'mux'</span>
   u_7combo_proc: <span class=K>PROCESS</span>(Alien_color, Gun_color, Color, dout4,
                          module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => dout3 <= Alien_color;
      <span class=K>WHEN</span> <span class=S>"01"</span> => dout3 <= Gun_color;
      <span class=K>WHEN</span> <span class=S>"10"</span> => dout3 <= Color;
      <span class=K>WHEN</span> <span class=S>"11"</span> => dout3 <= dout4;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout3 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_7combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_8' of 'mux'</span>
   u_8combo_proc: <span class=K>PROCESS</span>(X_coordinate, X_coord, Bullet_X_coord, dout6,
                          module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => dout1 <= X_coordinate;
      <span class=K>WHEN</span> <span class=S>"01"</span> => dout1 <= X_coord;
      <span class=K>WHEN</span> <span class=S>"10"</span> => dout1 <= Bullet_X_coord;
      <span class=K>WHEN</span> <span class=S>"11"</span> => dout1 <= dout6;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout1 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_8combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_9' of 'mux'</span>
   u_9combo_proc: <span class=K>PROCESS</span>(Y_coordinate, Y_coord, Bullet_Y_coord, dout5,
                          module_select)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> module_select <span class=K>IS</span>
      <span class=K>WHEN</span> <span class=S>"00"</span> => dout2 <= Y_coordinate;
      <span class=K>WHEN</span> <span class=S>"01"</span> => dout2 <= Y_coord;
      <span class=K>WHEN</span> <span class=S>"10"</span> => dout2 <= Bullet_Y_coord;
      <span class=K>WHEN</span> <span class=S>"11"</span> => dout2 <= dout5;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout2 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_9combo_proc;

   <span class=C>-- Instance port mappings.</span>
   U_13 : c2_t4_right_shifter
      <span class=K>PORT</span> <span class=K>MAP</span> (
         data_in  => X_coord,
         data_out => data_out
      );
   U_1 : c2_t6_basic_alien
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk            => clk,
         enable         => enable,
         hit            => hit,
         rst_n          => rst_n,
         Alien_color    => Alien_color,
         X_coordinate   => X_coordinate,
         Y_coordinate   => Y_coordinate,
         alien_defeated => alien_defeated
      );
   U_2 : c3_t1_gun_module
      <span class=K>PORT</span> <span class=K>MAP</span> (
         btn        => btn,
         clk        => clk,
         enable     => enable,
         gun_px_idx => gun_px_idx,
         rst_n      => rst_n,
         Gun_color  => Gun_color,
         X_coord    => X_coord,
         Y_coord    => Y_coord
      );
   U_5 : c3_t2_bullet
      <span class=K>PORT</span> <span class=K>MAP</span> (
         Gun_X_coord    => data_out,
         btn            => btn,
         clk            => clk,
         enable         => enable,
         rst_n          => rst_n,
         Bullet_X_coord => Bullet_X_coord,
         Bullet_Y_coord => Bullet_Y_coord,
         Color          => Color
      );
   U_4 : c5_t1_hit_detector
      <span class=K>PORT</span> <span class=K>MAP</span> (
         alien_x  => X_coordinate,
         alien_y  => Y_coordinate,
         btn      => btn(0),
         bullet_x => Bullet_X_coord,
         bullet_y => Bullet_Y_coord,
         clk      => clk,
         gun_x    => X_coord,
         mode_in  => dout,
         rst_n    => rst_n,
         hit      => hit
      );
   U_3 : c5_t2_write_sequencer
      <span class=K>PORT</span> <span class=K>MAP</span> (
         alien_defeated => alien_defeated,
         clk            => clk,
         rst_n          => rst_n,
         write_ready    => w_rdy,
         enable         => enable,
         frame_done     => frame_done,
         gun_px_idx     => gun_px_idx,
         module_select  => module_select,
         write          => write
      );
   U_10 : c6_t1_victory_effect_fsm
      <span class=K>PORT</span> <span class=K>MAP</span> (
         alien_defeated => alien_defeated,
         clk            => clk,
         rst            => rst_n,
         color          => dout4,
         x_coord        => dout6,
         y_coord        => dout5
      );
   U_0 : c7_t1_integration
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk           => clk,
         frame_written => frame_done,
         pixd_in       => dout3,
         rst_n         => rst_n,
         write         => write,
         xw            => dout2,
         yw            => dout1,
         channel       => channel,
         lat           => lat,
         s_clk         => s_clk,
         s_rst         => s_rst,
         s_sda         => s_sda,
         sb            => sb,
         w_rdy         => w_rdy
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
